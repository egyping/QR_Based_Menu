== Progress ==

-------
Backend
-------
login --  returning unauthorized from postman and able to login from amplify

Orders Table    --  deployed
Meals Table    --  deployed
customer Table    --  deployed
Cart Table      --  deployed

Admin Apis
create meal --  POST --   working --    create new meal 
list meals  -- POST --  working --  all meales regardles the status 
update meal --  PUT -- working  -- to update existing meal 
delete meal -- DELETE - 
Orders  --  POST  --  Change order status 
Order history --    POST    --  Query order history by customer mobile 

Frontend Apis 
All Meals   --  get meals --  GET --   working 
Cart   -- POST  --  Working --  Add meal to cart "create new cart or amend existing"
Cart   -- PUT   --  Working --  Increase \ Decrease the quantity of meal in exisiting cart 
Cart   -- PUT   --  Working --  Remove meal from cart 
Cart   -- DEL   --  Working --  Delete the cart in case the meal and the meal is the last meal in the cart 
Orders -- POST  -- Working  -- Create Order take the cart data and create order with default status CREATED
Orders -- PUT --   Working     -- Change order status, will send ordernumber and the new status 
Orders -- POST --   Working   -- get list of orders per status 
Orders -- POST  --  Working    --  send the customer mobile number to get the customer order history 
Orders -- POST  --   Working   --  Event Driven > when the order status change the customer gets SMS 

== Data Model ==

MealsTable:

    Primary Key:    mealId (String)

    Global Secondary Index:
                    StatusIndex
                    Partition Key: status (String)

    Other Attributes:
                    title (String)
                    description (String)
                    price (Number)
                    imageUrl (String)
                    createdAt (String)


OrdersTable:

    Primary Key:    orderId (String)

    Global Secondary Index:
                    CustomerMobileNumberIndex
                    Partition Key: customerMobileNumber (String)
                    Sort Key: createdAt (Number)

    Other Attributes:
                    customerName (String)
                    tableNumber (String)
                    totalAmount (Number)
                    status (String)
                    createdAt (Number)



OrderItemsTable:

    Primary Key:    orderItemId (String)

    Global Secondary Index:
                    OrderIdIndex
                    Partition Key: orderId (String)

    Other Attributes:
                    mealId (String)
                    quantity (Number)
                    price (Number)




CustomersTable:

    Primary Key:    mobileNumber (String)


    Other Attributes:
                    name (String)
                    createdAt (String)




CartTable:

Primary Key:    cartId (String)

Other Attributes:
                customerMobileNumber (String)
                items (List)
                mealId (String)
                quantity (Number)
                price (Number)
                totalAmount (Number)
                createdAt (String)

========================================

Node and other setups  
nvm install 
`curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash`
source ~/.nvm/nvm.sh
nvm install 20  
nvm use 20
npm install -g serverless@3
create iam user serlerlessUser then configure the terminal 
    serverless config credentials --provider aws --key <your-aws-access-key> --secret <your-aws-secret-key> --profile <profile-name>
    nano ~/.aws/credentials
npm install
npm install aws-sdk -save-
npm i --save @aws-sdk/client-dynamodb -save
npm i --save @aws-sdk/client-eventbridge -save


initiate new project 
serverless create --template aws-nodejs-typescript

install the dependancies 
npm install
npm install aws-sdk -save-
work on the directory structure


Dynamodb necessary setup
    plan for the data model first
    maitain tel he serverless/resourcesDynamo.ts
    declarebi the dynamoResources in the resources sections at serverless.ts
    also add the iam section
    npm imo --save @aws-sdk/client-dynamodb -save
   e the  Enabling streams on the order table 
tak
Event Driven necessary setups 
    first you need to e nable streams on the orders table 
        just add the SntreamSpecification to the table 
        StreamSpecctioification: {
        Streaa funmViewType: 'NEW_IMAGE'
        },mbd
    second: create lambda take the mobile number from the order and send SMS using SNS SMS without topic 




npx create-react-app frontend --template typescript

npm i -S aws-amplify @aws-amplify/ui-react
npm install react-toastify

https://getmycognitotoken.com/?region=us-east-1


Admin frontend
npx create-react-app admin-frontend --template typescript
npm install
npm install aws-amplify @aws-amplify/ui-react axios
npm install react-router-dom aws-amplify
npm install @aws-amplify/api @aws-amplify/core
npm install @aws-amplify/api-rest @aws-amplify/auth

Backend so far 
login --  returning unauthorized from postman and able to login from amplify
get meals --    GET --   working 
create meal --  POST --     working 
list meals